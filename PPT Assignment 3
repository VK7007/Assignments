#1
def closesSumt(nums, target):
    nums.sort()
    n = len(nums)
    closest = nums[0] + nums[1] + nums[n - 1]
    for i in range(0, n - 2):
        j = i + 1
        k = n - 1
        while j < k:
            current_sum = nums[i] + nums[j] + nums[k]
            if current_sum <= target:
                j += 1
            else:
                k -= 1
            if abs(closest - target) > abs(current_sum - target):
                closest = current_sum
    return closest

nums = list(map(int, input().split()))
target = int(input())
print(closesSumt(nums, target))

-------------------------------------------------------------------------------
#2
def solution(nums, target):
    ans = list()
    if nums is None or len(nums) < 4:
        return ans
    nums.sort()
    n = len(nums)
    for i in range(0, n - 3):
        if i > 0 and nums[i] == nums[i - 1]:
            continue
        for j in range(i + 1, n - 2):
            if j != i + 1 and nums[j] == nums[j - 1]:
                continue
            k = j + 1
            l = n - 1
            while k < l:
                current_sum = nums[i] + nums[j] + nums[k] + nums[l]
                if current_sum < target:
                    k += 1
                elif current_sum > target:
                    l -= 1
                else:
                    ans.append([nums[i], nums[j], nums[k], nums[l]])
                    k += 1
                    l -= 1
                    while k < l and nums[k] == nums[k - 1]:
                        k += 1
                    while k < l and nums[l] == nums[l + 1]:
                        l -= 1
    return ans

nums=list(map(int,input().split()))
target=int(input())
print(solution(nums,target))

-------------------------------------------------------------------------------
#3
def swap(nums, i, j):
    while i < j:
        nums[i], nums[j] = nums[j], nums[i]
        i += 1
        j -= 1

def nextPermutation(nums):
    n = len(nums)
    index = -1
    for i in range(n - 1, 0, -1):
        if nums[i] > nums[i - 1]:
            index = i - 1
            break
    if index == -1:
        swap(nums, 0, n - 1)
        return
    j = n - 1
    for i in range(n - 1, index, -1):
        if nums[i] > nums[index]:
            j = i
            break
    nums[index], nums[j] = nums[j], nums[index]
    swap(nums, index + 1, n - 1)
    
nums=list(map(int,input().split()))
nextPermutation(nums)
print(nums)

-------------------------------------------------------------------------------
#5
num=list(map(int,input().split()))
idx=len(num)-1
while(idx >= 0 and num[idx] == 9):
    num[idx]=0
    idx -=1
if (idx<0):
    num.insert(0,1)
else:
    num[idx] +=1
print(num)

-------------------------------------------------------------------------------
#5
num=list(map(int,input().split()))
idx=len(num)-1
while(idx >= 0 and num[idx] == 9):
    num[idx]=0
    idx -=1
if (idx<0):
    num.insert(0,1)
else:
    num[idx] +=1
print(num)

-------------------------------------------------------------------------------
#6
nums= list(map(int,input().split()))
res = nums[0]
for i in range(1,len(nums)):
    res = res ^ nums[i]
print(res)

-------------------------------------------------------------------------------
#8
class Solution:
  def canAttendMeetings(intervals):
    intervals.sort()
    for i in range(1, len(intervals)):
      if intervals[i - 1][1] > intervals[i][0]:
        return False
    return True
-------------------------------------------------------------------------------
