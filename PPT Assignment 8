#1
class Solution:
    def minimumDeleteSum(self, s1: str, s2: str) -> int:
        m = len(s1)
        n = len(s2)
        
        dp = [[0 for i in range(len(s1) + 1)] for j in range(len(s2) + 1)]

        for i in range(len(s2) + 1):
            for j in range(len(s1) + 1):
                if i == 0 and j == 0: 
                    continue
                elif i == 0:
                    dp[i][j] += dp[i][j-1] + ord(s1[j-1])
                elif j  == 0:
                    dp[i][j] += dp[i-1][j] + ord(s2[i-1])
                elif s1[j-1] == s2[i-1]:
                    dp[i][j] = dp[i-1][j-1]
                else:
                    dp[i][j] = min(ord(s1[j-1]) + dp[i][j-1], ord(s2[i-1]) + dp[i-1][j])
        
        return dp[n][m]

#2

class Solution(object):
    def checkValidString(self, s):
        lo = hi = 0
        for c in s:
            lo += 1 if c == '(' else -1
            hi += 1 if c != ')' else -1
            if hi < 0: break
            lo = max(lo, 0)

        return lo == 0

#8

class Solution:
    def buddyStrings(self, s: str, goal: str) -> bool:        
        c=0
        l=len(s)
        if len(goal)!=l:
            return False
        set_s=set()
        set_g=set()
        for i in range(l):
            if s[i]!=goal[i]:
                set_s.add(goal[i])
                set_g.add(s[i])
                c+=1
        if (c>2) | (set_s!=set_g):
            return False
        if (c==0) & (l==len(set(s))): 
            return False
        return True

